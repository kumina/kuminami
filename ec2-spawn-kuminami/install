#!/bin/sh

set -e -x

. /params
HOSTNAME_BASE=`echo "$HOSTNAME" | sed -e 's/\..*//'`

case `uname -m` in
x86_64)
	ARCH=amd64
	KARCH=amd64
	;;
i?86)
	ARCH=i386
	KARCH=686
	;;
esac

mkrawpart()
{
	mkfs.ext2 -L $2 $1
	mkdir -p /target/$2
	mount $1 /target/$2

	echo "LABEL=$2 $2 ext2 defaults 0 2" >> /fstab
}

mklvmpart()
{
	lvcreate -L $2 -n vg/$1
	mkfs.ext4 -O dir_index,extent -L $3 /dev/vg/$1
	mkdir -p /target/$3
	mount /dev/vg/$1 /target/$3

	if test $3 = /
	then
		PASS=1
	else
		PASS=2
	fi
	echo "/dev/mapper/vg-$1 $3 ext4 defaults 0 $PASS" >> /fstab
}

mkswappart()
{
	lvcreate -L $2 -n vg/$1
	mkswap /dev/vg/$1
	swapon /dev/vg/$1

	echo "/dev/mapper/vg-$1 none swap sw 0 0" >> /fstab
}

# Volume group
DISKS=
for i in /dev/sda2 /dev/sdb /dev/sdc
do
	if test -b $i
	then
		pvcreate -ffy $i
		DISKS="$DISKS $i"
	fi
done
vgcreate vg $DISKS

# Create partitions
echo 'proc /proc proc defaults 0 0' > /fstab
. /partitions

# Unpack base installation
debootstrap \
	--arch=$ARCH \
	squeeze \
	/target \
	http://64.50.233.100/debian

# Essential configuration files
install -m 444 /fstab /target/etc/fstab
cat > /target/etc/network/interfaces << EOF
auto lo
iface lo inet loopback
auto eth0
iface eth0 inet dhcp
	dns-search $DNSDOMAINS
EOF
echo $HOSTNAME_BASE > /target/etc/hostname
sed -i "s/^127.0.0.1.*/127.0.0.1 $HOSTNAME $HOSTNAME_BASE localhost/" \
	/target/etc/hosts

cat > /target/etc/apt/sources.list.d/kumina.list << EOF
deb	http://debian.kumina.nl/debian	squeeze-kumina	main
EOF

cat > /target/etc/apt/sources.list.d/squeeze-backports.list << EOF
deb	http://backports.debian.org/debian-backports	squeeze-backports	main contrib non-free
EOF

cat > /target/etc/apt/preferences << EOF
Package: puppet
Pin: release a=squeeze-backports
Pin-Priority: 999

Package: facter
Pin: version 1.5.9*
Pin-Priority: 999

Package: *
Pin: release a=squeeze-kumina
Pin-Priority: 999
EOF

# Install additional dependencies
mount -t devpts none /target/dev/pts
mount -t proc none /target/proc
chroot /target apt-get update
chroot /target apt-get -y install \
	linux-image-xen-$KARCH \
	lsb-release \
	lvm2 \
	openssh-server \
	puppet \
	resolvconf

# Install Puppet configuration
cat > /target/etc/puppet/puppet.conf << EOF
[main]
environment = $PUPPETENVIRONMENT
factpath = \$vardir/lib/facter
logdir = /var/log/puppet
pluginsync = true
rundir = /var/run/puppet
ssldir = /var/lib/puppet/ssl
templatedir = \$confdir/templates
vardir = /var/lib/puppet

[agent]
configtimeout = 1800
report = false
server = puppet1.kumina.nl
splay = false
EOF

cat > /target/etc/rc.local << EOF
#!/bin/sh

set -e

puppetd --verbose --no-daemonize --no-splay --onetime

if test -x /etc/rc.final
then
	# This node has a dedicated application
	/etc/rc.final
else
	# Just a generic system
	rm /etc/rc.local
fi
EOF
chmod +x /target/etc/rc.local
PUPDIR=/target/var/lib/puppet/ssl
mkdir -p $PUPDIR/ca/signed $PUPDIR/certs $PUPDIR/private_keys
cp /puppet.cert.pem $PUPDIR/ca/signed/$HOSTNAME.pem
cp /puppet.ca.pem $PUPDIR/certs/ca.pem
cp /puppet.privkey.pem $PUPDIR/private_keys/$HOSTNAME.pem

# Add SSH keys
if test -f /sshkeys
then
	mkdir -m 700 -p /target/root/.ssh
	cp /sshkeys /target/root/.ssh/authorized_keys
fi

# Patch up the boot loader, now that we have a kernel
cd /target/boot
mkdir -p boot/grub
cat > boot/grub/menu.lst << EOF
default 0
timeout 1

title Debian
	root	(hd0)
	kernel	/`echo vmlinu*` root=/dev/mapper/vg-root
	initrd	/`echo initrd*`
EOF
